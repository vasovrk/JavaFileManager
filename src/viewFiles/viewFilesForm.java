/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewFiles;

import static com.sun.org.apache.xalan.internal.xsltc.compiler.util.Type.String;
import controllers.ActionEnum;
import commands.Command;
import commands.CopyCommand;
import commands.CutCommand;
import commands.ICommand;
import commands.RenameCommand;
import controllers.ActionController;
import controllers.ItemDeleteController;
import controllers.ItemPasteActionController;
import controllers.RenameController;
import controllers.TreeController;
import controllers.ViewFilesController;
import java.io.File;
import java.util.Stack;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author vasovourka
 */
public class viewFilesForm extends javax.swing.JFrame {
    String userHome = System.getProperty( "user.home" );
    final File folder = new File("/Users/vasovourka/NetBeansProjects");
    ICommand comm;
    boolean res;
    Stack<Command> stUndo;
    Stack<Command> stRedo;
    
    
    
    //treeCreations
    /**
     * Creates new form viewFilesForm1
     */
    public viewFilesForm() {
       // this.path = pathText.getText();
        this.stUndo = new Stack<>();
        this.stRedo = new Stack<>();

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        popUp = new javax.swing.JPopupMenu();
        copyMenuItem1 = new javax.swing.JMenuItem();
        deleteMenuItem1 = new javax.swing.JMenuItem();
        renameMenuitem = new javax.swing.JMenuItem();
        cutMenuIntem1 = new javax.swing.JMenuItem();
        pasteMenuItem1 = new javax.swing.JMenuItem();
        viewRefreshButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        filesTree = new javax.swing.JTree();
        pathText = new javax.swing.JTextField();
        goButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        pathLabel = new javax.swing.JLabel();
        redoButton = new javax.swing.JButton();
        undoButton = new javax.swing.JButton();
        undoCopyButton = new javax.swing.JButton();
        redoCopyButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        createFolderMenuItem = new javax.swing.JMenuItem();
        createDocumentMenuItem = new javax.swing.JMenuItem();
        propertiesMenuItem = new javax.swing.JMenuItem();
        closeMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        containsMenuItem = new javax.swing.JMenuItem();

        popUp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                popUpMouseReleased(evt);
            }
        });

        copyMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        copyMenuItem1.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        copyMenuItem1.setText("copy");
        copyMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        popUp.add(copyMenuItem1);

        deleteMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, 0));
        deleteMenuItem1.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        deleteMenuItem1.setText("delete");
        deleteMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItem1ActionPerformed(evt);
            }
        });
        popUp.add(deleteMenuItem1);

        renameMenuitem.setText("rename");
        renameMenuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renameMenuitemActionPerformed(evt);
            }
        });
        popUp.add(renameMenuitem);

        cutMenuIntem1.setText("cut");
        cutMenuIntem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        popUp.add(cutMenuIntem1);

        pasteMenuItem1.setText("paste");
        pasteMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        popUp.add(pasteMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        viewRefreshButton.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        viewRefreshButton.setText("View/Refresh");
        viewRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewRefreshButtonActionPerformed(evt);
            }
        });

        filesTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 102)));
        filesTable.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        filesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "FileName", "Size", "Kind"
            }
        ));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, popUp, org.jdesktop.beansbinding.ObjectProperty.create(), filesTable, org.jdesktop.beansbinding.BeanProperty.create("componentPopupMenu"));
        bindingGroup.addBinding(binding);

        filesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                filesTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(filesTable);

        filesTree.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 102)));
        filesTree.setFont(new java.awt.Font("Bookman Old Style", 0, 12)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("tree");
        filesTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        filesTree.setExpandsSelectedPaths(false);
        filesTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                filesTreeMousePressed(evt);
            }
        });
        filesTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                filesTreeTreeExpanded(evt);
            }
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
        });
        filesTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                filesTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(filesTree);

        pathText.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pathTextMouseReleased(evt);
            }
        });

        goButton.setFont(new java.awt.Font("Bookman Old Style", 0, 13)); // NOI18N
        goButton.setText("Go");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        pathLabel.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        pathLabel.setText("Path:");

        redoButton.setText("Redo");
        redoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoButtonActionPerformed(evt);
            }
        });

        undoButton.setText("Undo");
        undoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoButtonActionPerformed(evt);
            }
        });

        undoCopyButton.setText("undoCopy");
        undoCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoCopyButtonActionPerformed(evt);
            }
        });

        redoCopyButton.setText("redoCopy");
        redoCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoCopyButtonActionPerformed(evt);
            }
        });

        menuBar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N

        createFolderMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        createFolderMenuItem.setText("Create Folder");
        createFolderMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFolderMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(createFolderMenuItem);

        createDocumentMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        createDocumentMenuItem.setText("Create Document");
        fileMenu.add(createDocumentMenuItem);

        propertiesMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        propertiesMenuItem.setText("Properties");
        fileMenu.add(propertiesMenuItem);

        closeMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        closeMenuItem.setText("Close");
        closeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        editMenu.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N

        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.META_MASK));
        cutMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        cutMenuItem.setText("cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        copyMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        copyMenuItem.setText("copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_MASK));
        pasteMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        pasteMenuItem.setText("paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, 0));
        deleteMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        deleteMenuItem.setText("delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N

        containsMenuItem.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        containsMenuItem.setText("Contents");
        containsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(containsMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pathText, javax.swing.GroupLayout.PREFERRED_SIZE, 516, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(goButton)
                        .addGap(234, 234, 234)
                        .addComponent(undoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(undoCopyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(redoCopyButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(viewRefreshButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(155, 155, 155)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pathText, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(goButton)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(undoButton)
                                        .addComponent(redoButton))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(undoCopyButton)
                                .addComponent(redoCopyButton)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewRefreshButton)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewRefreshButtonActionPerformed
        // TODO:create jtree and jtable on start
        ViewFacade facade;
        facade = new ViewFacade();
        facade.initializeTree(filesTable, filesTree, pathText);

    }//GEN-LAST:event_viewRefreshButtonActionPerformed

    private void filesTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_filesTreeValueChanged

        viewFiles.TableFacade.selectedNode(filesTable, filesTree, pathText);
    }

    public void selectedNode() {


    }//GEN-LAST:event_filesTreeValueChanged

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        ViewFilesController controller = new ViewFilesController();
        File file = new File(pathText.getText());
        filesTable = DefaultJtable.defaultJtable(filesTable);
        controller.listFilesFolder(file, filesTable, filesTree);
         TreeController.treeCreation(filesTree, file);
    }//GEN-LAST:event_goButtonActionPerformed

    private void filesTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filesTableMouseReleased
        PopupMenu.popupAction(evt, popUp);

    }//GEN-LAST:event_filesTableMouseReleased

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

    }//GEN-LAST:event_formMouseReleased

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed

        String name = viewFiles.SelectedCell.selected(filesTable);
        comm = new CutCommand(ActionEnum.CUT, pathText.getText(), name);
                
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed

        res=ItemPasteActionController.action(comm, pathText.getText());
        viewFiles.TableFacade.selectedNode(filesTable, filesTree, pathText);
        filesTree.updateUI();

    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        // TODO add your handling code here:

        String name = viewFiles.SelectedCell.selected(filesTable);
        ItemDeleteController.action(evt, pathText.getText(), name);
        viewFiles.TableFacade.selectedNode(filesTable, filesTree, pathText);

    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        String name = viewFiles.SelectedCell.selected(filesTable);
        
        comm = new CopyCommand(ActionEnum.COPY, pathText.getText(), name);
        
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void createFolderMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFolderMenuItemActionPerformed

    }//GEN-LAST:event_createFolderMenuItemActionPerformed

    private void containsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containsMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_containsMenuItemActionPerformed

    private void closeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMenuItemActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeMenuItemActionPerformed

    private void pathTextMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pathTextMouseReleased
    }//GEN-LAST:event_pathTextMouseReleased

    private void popUpMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_popUpMouseReleased
      

    }//GEN-LAST:event_popUpMouseReleased

    private void deleteMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItem1ActionPerformed
        // TODO add your handling code here:  
        String name = viewFiles.SelectedCell.selected(filesTable);
        ItemDeleteController.action(evt, pathText.getText(), name);
        viewFiles.TableFacade.selectedNode(filesTable, filesTree, pathText);

    }//GEN-LAST:event_deleteMenuItem1ActionPerformed

    private void renameMenuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renameMenuitemActionPerformed
        String oldName = viewFiles.SelectedCell.selected(filesTable);
        comm = new RenameCommand(ActionEnum.RENAME, pathText.getText());
        RenameController.inputName(comm, pathText.getText(), oldName);
        viewFiles.TableFacade.selectedNode(filesTable, filesTree, pathText);
   

    }//GEN-LAST:event_renameMenuitemActionPerformed

    private void redoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoButtonActionPerformed
       
        controllers.RedoController.redo(comm);
        viewFiles.TableFacade.selectedNode(filesTable, filesTree, pathText);
    }//GEN-LAST:event_redoButtonActionPerformed

    private void undoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoButtonActionPerformed
        
        
        if (!res) {
        undoButton.setEnabled(false);
        System.out.println("undostack empty!!!");
        }
        viewFiles.TableFacade.selectedNode(filesTable, filesTree, pathText);
    }//GEN-LAST:event_undoButtonActionPerformed

    private void undoCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoCopyButtonActionPerformed
        // TODO add your handling code here:
        controllers.StackController.undoCopy(stUndo, stRedo);
        if (stUndo.isEmpty()) {
            undoCopyButton.setEnabled(false);
            System.out.println("undostack empty!!!");
        }
        viewFiles.TableFacade.selectedNode(filesTable, filesTree, pathText);
    }//GEN-LAST:event_undoCopyButtonActionPerformed

    private void filesTreeTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_filesTreeTreeExpanded
        // TODO add your handling code here:

        System.out.println(evt.getPath().getLastPathComponent().toString());

        File treeSelected = new File(evt.getPath().getLastPathComponent().toString());
        DefaultMutableTreeNode parent = new DefaultMutableTreeNode(treeSelected);

        controllers.TreeController.treeSub(parent, folder);

    }//GEN-LAST:event_filesTreeTreeExpanded

    private void filesTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_filesTreeMousePressed
        // TODO add your handling code here:

    }//GEN-LAST:event_filesTreeMousePressed

    private void redoCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoCopyButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_redoCopyButtonActionPerformed

    /**
     * @param args the commmand line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.comm/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewFilesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewFilesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewFilesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewFilesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewFilesForm().setVisible(true);
            }
        });
        //System.out.println(System.getenv(String));
        String userHome = System.getProperty( "user.home" );
        String home=System.getProperty("user.dir");
        System.out.println(userHome);
                System.out.println(home);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem closeMenuItem;
    private javax.swing.JMenuItem containsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem copyMenuItem1;
    private javax.swing.JMenuItem createDocumentMenuItem;
    private javax.swing.JMenuItem createFolderMenuItem;
    private javax.swing.JMenuItem cutMenuIntem1;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem deleteMenuItem1;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTable filesTable;
    private javax.swing.JTree filesTree;
    private javax.swing.JButton goButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem pasteMenuItem1;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField pathText;
    private javax.swing.JPopupMenu popUp;
    private javax.swing.JMenuItem propertiesMenuItem;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton redoCopyButton;
    private javax.swing.JMenuItem renameMenuitem;
    private javax.swing.JButton undoButton;
    private javax.swing.JButton undoCopyButton;
    private javax.swing.JButton viewRefreshButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
